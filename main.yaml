---
- name: Automated Deployment and Configuration with Ansible
  hosts: hng
  become: yes
  vars:
    pg_password_file: /var/secrets/pg_pw.txt
    pg_user: db_one_xysq_user
    pg_password: fgYiwwTsuMhfosq3NMgBa2xToWFMIqDq
    pg_database: db_one_xysq
    pg_host: dpg-cqc2ds2j1k6c73fs2r20-a.oregon-postgres.render.com
    app_port: 3000
    app_dir: /opt/stage_5b
    log_dir: /var/log/stage_5b

  tasks:
    - name: Ensure hng user exists
      user:
        name: hng
        state: present
        groups: sudo

    - name: Create necessary directories
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        mode: "0755"
      loop:
        - /var/secrets
        - "{{ log_dir }}"
        - "{{ app_dir }}"

    - name: Save PostgreSQL admin credentials
      copy:
        dest: "{{ pg_password_file }}"
        content: "PG_USER={{ pg_user }}\nPG_PASSWORD={{ pg_password }}\nPG_DATABASE={{ pg_database }}\n"
        owner: root
        group: root
        mode: "0600"

    - name: Read PostgreSQL credentials
      slurp:
        src: "{{ pg_password_file }}"
      register: pg_creds

    - name: Set PostgreSQL credentials as variables
      set_fact:
        pg_user: "{{ (pg_creds.content | b64decode).split('\n')[0].split('=')[1] }}"
        pg_password: "{{ (pg_creds.content | b64decode).split('\n')[1].split('=')[1] }}"
        pg_database: "{{ (pg_creds.content | b64decode).split('\n')[2].split('=')[1] }}"

    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: dist

    - name: Add NodeSource repository for Node.js
      shell: curl -sL https://deb.nodesource.com/setup_18.x | bash -
      args:
        executable: /bin/bash

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install necessary packages
      apt:
        name:
          - git
          - postgresql
          - nginx
          - rabbitmq-server
          - nodejs
        state: present

    - name: Check if repository already exists
      stat:
        path: "{{ app_dir }}/.git"
      register: repo_exists

    - name: Clone the boilerplate repository
      git:
        repo: https://github.com/hngprojects/hng_boilerplate_nestjs.git
        dest: "{{ app_dir }}"
        version: devops
      become: yes
      become_user: root
      when: not repo_exists.stat.exists

    - name: Change ownership of the application directory
      file:
        path: "{{ app_dir }}"
        owner: hng
        group: hng
        recurse: yes

    - name: Set correct permissions for app directory
      file:
        path: "{{ app_dir }}"
        owner: hng
        group: hng
        mode: "0755"
        recurse: yes

    - name: Create .env file
      copy:
        dest: "{{ app_dir }}/.env"
        content: |
          PROFILE=local
          NODE_ENV=development
          PORT=3000
          DB_USERNAME=db_one_xysq_user
          DB_PASSWORD=fgYiwwTsuMhfosq3NMgBa2xToWFMIqDq
          DB_DATABASE=db_one_xysq
          DB_HOST=dpg-cqc2ds2j1k6c73fs2r20-a.oregon-postgres.render.com
          DB_PORT=5432
          DB_ENTITIES=dist/src/modules/**/entities/**/*.entity{.ts,.js}
          DB_MIGRATIONS=dist/**/migrations/*{.ts,.js}
          DB_TYPE=postgres
          DB_SSL=true
          JWT_SECRET=someSecrets
          JWT_EXPIRY_TIMEFRAME=3600
        owner: hng
        group: hng
        mode: "0600"

    - name: Install application dependencies
      shell: |
        su - hng -c "cd {{ app_dir }} && npm install"
      args:
        executable: /bin/bash
      become: yes

    - name: Ensure application runs on port 3000
      shell: |
        su - hng -c "cd {{ app_dir }} && nohup npm start > {{ log_dir }}/out.log 2> {{ log_dir }}/error.log &"
      args:
        executable: /bin/bash
      become: yes

    - name: Configure Nginx
      copy:
        dest: /etc/nginx/sites-available/default
        content: |
          server {
              listen 80;
              server_name _;
              location / {
                  proxy_pass http://127.0.0.1:{{ app_port }};
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
      notify:
        - Reload Nginx

    - name: Ensure log files are owned by hng user
      file:
        path: "{{ item }}"
        owner: hng
        group: hng
        state: touch
        mode: "0644"
      loop:
        - "{{ log_dir }}/error.log"
        - "{{ log_dir }}/out.log"

    - name: Ensure services are running
      service:
        name: "{{ item }}"
        state: started
      loop:
        - postgresql
        - nginx
        - rabbitmq-server

  handlers:
    - name: Reload Nginx
      service:
        name: nginx
        state: reloaded

    - name: Reload Environment
      shell: |
        if [ -f /etc/environment ]; then
          . /etc/environment
        fi
      args:
        executable: /bin/bash
